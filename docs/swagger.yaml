basePath: /
definitions:
  internal_api.AuditLogResponse:
    properties:
      action:
        example: BAN_USER
        type: string
      actor:
        properties:
          id:
            example: abc12345
            type: string
          username:
            example: admin_user
            type: string
        type: object
      actor_id:
        example: abc12345
        type: string
      channel:
        properties:
          id:
            example: xyz123
            type: string
          name:
            example: general
            type: string
        type: object
      channel_id:
        example: xyz123
        type: string
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        example: Banned user from channel
        type: string
      id:
        example: 1
        type: integer
      metadata:
        additionalProperties: true
        type: object
      target:
        properties:
          id:
            example: def67890
            type: string
          username:
            example: banned_user
            type: string
        type: object
      target_id:
        example: def67890
        type: string
    type: object
  internal_api.AuditLogsResponse:
    properties:
      limit:
        type: integer
      logs:
        items:
          $ref: '#/definitions/internal_api.AuditLogResponse'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  internal_api.AuthResponse:
    properties:
      message:
        example: Register successful
        type: string
      user:
        $ref: '#/definitions/internal_api.UserResponse'
    type: object
  internal_api.BanInfo:
    properties:
      banned_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      banned_by:
        $ref: '#/definitions/internal_api.UserInfo'
      expires_at:
        example: "2023-01-02T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      reason:
        example: spam
        type: string
      user:
        $ref: '#/definitions/internal_api.UserInfo'
      user_id:
        example: a1b2c3d4
        type: string
    type: object
  internal_api.BanUserRequest:
    properties:
      reason:
        example: spam
        type: string
      user_id:
        example: a1b2c3d4
        type: string
    required:
    - user_id
    type: object
  internal_api.BansResponse:
    properties:
      bans:
        items:
          $ref: '#/definitions/internal_api.BanInfo'
        type: array
    type: object
  internal_api.ChannelInfo:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: ch123
        type: string
      is_visible:
        example: true
        type: boolean
      name:
        example: general
        type: string
      owner:
        $ref: '#/definitions/internal_api.ChannelOwner'
    type: object
  internal_api.ChannelOwner:
    properties:
      id:
        example: a1b2c3d4
        type: string
      username:
        example: john_doe
        type: string
    type: object
  internal_api.ChannelResponse:
    properties:
      channel:
        $ref: '#/definitions/internal_api.ChannelInfo'
    type: object
  internal_api.ChannelSearchResult:
    properties:
      id:
        type: string
      is_visible:
        type: boolean
      name:
        type: string
      owner:
        properties:
          id:
            type: string
          username:
            type: string
        type: object
    type: object
  internal_api.ChannelsResponse:
    properties:
      channels:
        items:
          $ref: '#/definitions/internal_api.ChannelInfo'
        type: array
    type: object
  internal_api.ChannelsSearchResponse:
    properties:
      channels:
        items:
          $ref: '#/definitions/internal_api.ChannelSearchResult'
        type: array
      total:
        type: integer
    type: object
  internal_api.CreateChannelRequest:
    properties:
      is_visible:
        example: true
        type: boolean
      name:
        example: general
        type: string
      password:
        example: secretpass
        type: string
    required:
    - name
    type: object
  internal_api.ErrorResponse:
    properties:
      error:
        example: username cannot be empty
        type: string
    type: object
  internal_api.JoinChannelRequest:
    properties:
      password:
        example: secretpass
        type: string
    type: object
  internal_api.MessageInfo:
    properties:
      channel_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      user:
        properties:
          id:
            type: string
          username:
            type: string
        type: object
      user_id:
        type: string
    type: object
  internal_api.MessageResponse:
    properties:
      message:
        example: Logged out
        type: string
    type: object
  internal_api.MessageSearchResult:
    properties:
      channel_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      user:
        properties:
          id:
            type: string
          username:
            type: string
        type: object
      user_id:
        type: string
    type: object
  internal_api.MessagesResponse:
    properties:
      has_more:
        type: boolean
      messages:
        items:
          $ref: '#/definitions/internal_api.MessageInfo'
        type: array
      total:
        type: integer
    type: object
  internal_api.MessagesSearchResponse:
    properties:
      messages:
        items:
          $ref: '#/definitions/internal_api.MessageSearchResult'
        type: array
      total:
        type: integer
    type: object
  internal_api.RoleUpdateRequest:
    properties:
      role:
        example: Moderator
        type: string
      user_id:
        example: abc12345
        type: string
    required:
    - role
    - user_id
    type: object
  internal_api.TempBanUserRequest:
    properties:
      duration:
        description: e.g., "24h", "30m"
        example: 24h
        type: string
      reason:
        example: timeout
        type: string
      user_id:
        example: a1b2c3d4
        type: string
    required:
    - duration
    - user_id
    type: object
  internal_api.UpdateUserRequest:
    properties:
      password:
        example: newPassword123
        type: string
      username:
        example: new_username
        type: string
    type: object
  internal_api.UpdateUserResponse:
    properties:
      message:
        example: User updated successfully
        type: string
      user:
        $ref: '#/definitions/internal_api.UserResponse'
    type: object
  internal_api.UserInfo:
    properties:
      id:
        example: a1b2c3d4
        type: string
      username:
        example: john_doe
        type: string
    type: object
  internal_api.UserLoginInput:
    properties:
      password:
        example: securePassword123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  internal_api.UserRegisterInput:
    properties:
      password:
        example: securePassword123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  internal_api.UserResponse:
    properties:
      id:
        example: a1b2c3d4
        type: string
      username:
        example: john_doe
        type: string
    type: object
  internal_api.UserSearchResult:
    properties:
      id:
        type: string
      username:
        type: string
    type: object
  internal_api.UsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/internal_api.UserInfo'
        type: array
    type: object
  internal_api.UsersSearchResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/internal_api.UserSearchResult'
        type: array
    type: object
host: localhost:9876
info:
  contact:
    email: support@gochat.dev
    name: API Support
    url: http://github.com/your-org/go-chat
  description: A real-time chat server with JWT authentication, channel management,
    and WebSocket support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Chat API
  version: "1.0"
paths:
  /api/audit:
    get:
      consumes:
      - application/json
      description: Get audit logs with optional filtering (system admin only)
      parameters:
      - description: Filter by channel ID
        in: query
        name: channel_id
        type: string
      - description: Filter by actor ID
        in: query
        name: actor_id
        type: string
      - description: Filter by action type
        in: query
        name: action
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Audit logs retrieved successfully
          schema:
            $ref: '#/definitions/internal_api.AuditLogsResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "403":
          description: Admin access required
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Get audit logs with filtering
      tags:
      - Audit Logs
  /api/channels:
    get:
      consumes:
      - application/json
      description: Get a list of all publicly visible channels
      produces:
      - application/json
      responses:
        "200":
          description: List of visible channels
          schema:
            $ref: '#/definitions/internal_api.ChannelsResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Get all visible channels
      tags:
      - Channels
    post:
      consumes:
      - application/json
      description: Create a new channel with optional password protection
      parameters:
      - description: Create channel request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api.CreateChannelRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Channel created successfully
          schema:
            $ref: '#/definitions/internal_api.ChannelResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Create a new channel
      tags:
      - Channels
  /api/channels/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a channel (only channel owner can delete)
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Channel deleted successfully
          schema:
            $ref: '#/definitions/internal_api.MessageResponse'
        "400":
          description: Bad request or not authorized
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Delete a channel
      tags:
      - Channels
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Channel details
          schema:
            $ref: '#/definitions/internal_api.ChannelResponse'
        "400":
          description: Channel ID required
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "404":
          description: Channel not found
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Get channel details
      tags:
      - Channels
  /api/channels/{id}/audit:
    get:
      consumes:
      - application/json
      description: Get audit logs for a specific channel (only channel owners can
        view)
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Audit logs retrieved successfully
          schema:
            $ref: '#/definitions/internal_api.AuditLogsResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "403":
          description: Only channel owners can view audit logs
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "404":
          description: Channel not found
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Get channel audit logs
      tags:
      - Audit Logs
  /api/channels/{id}/ban:
    post:
      consumes:
      - application/json
      description: Permanently ban a user from a channel (only channel owner can ban)
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Ban user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api.BanUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User banned successfully
          schema:
            $ref: '#/definitions/internal_api.MessageResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "403":
          description: Only channel owner can ban users
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Ban user from channel
      tags:
      - Channel Administration
  /api/channels/{id}/ban/{userId}:
    delete:
      consumes:
      - application/json
      description: Remove a ban from a user, allowing them to rejoin the channel (only
        channel owner can unban)
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID to unban
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User unbanned successfully
          schema:
            $ref: '#/definitions/internal_api.MessageResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "403":
          description: Only channel owner can unban users
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Unban user from channel
      tags:
      - Channel Administration
  /api/channels/{id}/bans:
    get:
      consumes:
      - application/json
      description: Get a list of all active and inactive bans for a channel (only
        channel owner can view)
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of channel bans
          schema:
            $ref: '#/definitions/internal_api.BansResponse'
        "400":
          description: Channel ID required
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "403":
          description: Only channel owner can view bans
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Get channel bans
      tags:
      - Channel Administration
  /api/channels/{id}/demote:
    post:
      consumes:
      - application/json
      description: Demote a user to a lower role in the channel (only channel owners
        can demote)
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Role update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api.RoleUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User demoted successfully
          schema:
            $ref: '#/definitions/internal_api.MessageResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "403":
          description: Only channel owners can demote users
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "404":
          description: Channel or user not found
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Demote user in channel
      tags:
      - Channel Administration
  /api/channels/{id}/join:
    post:
      consumes:
      - application/json
      description: Join a channel, optionally providing password for protected channels
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Join channel request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api.JoinChannelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully joined channel
          schema:
            $ref: '#/definitions/internal_api.MessageResponse'
        "400":
          description: Bad request or incorrect password
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Join a channel
      tags:
      - Channels
  /api/channels/{id}/leave:
    delete:
      consumes:
      - application/json
      description: Leave a channel that the user has previously joined
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully left channel
          schema:
            $ref: '#/definitions/internal_api.MessageResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Leave a channel
      tags:
      - Channels
  /api/channels/{id}/messages:
    get:
      consumes:
      - application/json
      description: Get paginated message history for a channel (only for channel members)
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Number of messages to retrieve (default: 50, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of messages to skip (default: 0)'
        in: query
        name: offset
        type: integer
      - description: Get messages before this message ID
        in: query
        name: before
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Messages retrieved successfully
          schema:
            $ref: '#/definitions/internal_api.MessagesResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "403":
          description: You are not a member of this channel
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "404":
          description: Channel not found
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Get channel message history
      tags:
      - Messages
  /api/channels/{id}/promote:
    post:
      consumes:
      - application/json
      description: Promote a user to a higher role in the channel (only channel owners
        can promote)
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Role update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api.RoleUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User promoted successfully
          schema:
            $ref: '#/definitions/internal_api.MessageResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "403":
          description: Only channel owners can promote users
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "404":
          description: Channel or user not found
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Promote user in channel
      tags:
      - Channel Administration
  /api/channels/{id}/tempban:
    post:
      consumes:
      - application/json
      description: Temporarily ban a user from a channel for a specified duration
        (only channel owner can ban)
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      - description: Temporary ban user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api.TempBanUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User temporarily banned successfully
          schema:
            $ref: '#/definitions/internal_api.MessageResponse'
        "400":
          description: Bad request or invalid duration format
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "403":
          description: Only channel owner can ban users
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Temporarily ban user from channel
      tags:
      - Channel Administration
  /api/channels/{id}/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users in a specific channel
      parameters:
      - description: Channel ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of channel users
          schema:
            $ref: '#/definitions/internal_api.UsersResponse'
        "400":
          description: Channel ID required
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Get channel users
      tags:
      - Channels
  /api/channels/me:
    get:
      consumes:
      - application/json
      description: Get all channels the authenticated user has joined
      produces:
      - application/json
      responses:
        "200":
          description: List of user's channels
          schema:
            $ref: '#/definitions/internal_api.ChannelsResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Get user's channels
      tags:
      - Channels
  /api/logout:
    post:
      consumes:
      - application/json
      description: Logout user and clear authentication cookies
      produces:
      - application/json
      responses:
        "200":
          description: User logged out successfully
          schema:
            $ref: '#/definitions/internal_api.MessageResponse'
      security:
      - CookieAuth: []
      summary: Logout user
      tags:
      - Authentication
  /api/refresh_token:
    post:
      consumes:
      - application/json
      description: Refresh JWT token using refresh token from cookie
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/internal_api.MessageResponse'
        "401":
          description: Invalid or missing refresh token
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Refresh JWT token
      tags:
      - Authentication
  /api/search/channels:
    get:
      consumes:
      - application/json
      description: Search for visible channels by name (partial matching)
      parameters:
      - description: Search query (minimum 2 characters)
        in: query
        name: q
        required: true
        type: string
      - description: 'Number of results to return (default: 20, max: 50)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Channels found
          schema:
            $ref: '#/definitions/internal_api.ChannelsSearchResponse'
        "400":
          description: Bad request - invalid query
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Search channels
      tags:
      - Search
  /api/search/messages:
    get:
      consumes:
      - application/json
      description: Search for messages within a specific channel (only for channel
        members)
      parameters:
      - description: Search query (minimum 2 characters)
        in: query
        name: q
        required: true
        type: string
      - description: Channel ID to search within
        in: query
        name: channel_id
        required: true
        type: string
      - description: 'Number of results to return (default: 20, max: 50)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Messages found
          schema:
            $ref: '#/definitions/internal_api.MessagesSearchResponse'
        "400":
          description: Bad request - invalid query or channel_id
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "403":
          description: You are not a member of this channel
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "404":
          description: Channel not found
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Search messages
      tags:
      - Search
  /api/search/users:
    get:
      consumes:
      - application/json
      description: Search for users by username (partial matching)
      parameters:
      - description: Search query (minimum 2 characters)
        in: query
        name: q
        required: true
        type: string
      - description: 'Number of results to return (default: 20, max: 50)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users found
          schema:
            $ref: '#/definitions/internal_api.UsersSearchResponse'
        "400":
          description: Bad request - invalid query
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Search users
      tags:
      - Search
  /api/user:
    delete:
      consumes:
      - application/json
      description: Soft delete user account and clear authentication cookies
      produces:
      - application/json
      responses:
        "200":
          description: Account deleted successfully
          schema:
            $ref: '#/definitions/internal_api.MessageResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Delete user account
      tags:
      - User Management
    patch:
      consumes:
      - application/json
      description: Update user username and/or password
      parameters:
      - description: Update user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/internal_api.UpdateUserResponse'
        "400":
          description: Bad request or username already exists
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Update user information
      tags:
      - User Management
  /api/user/channels/joined:
    get:
      consumes:
      - application/json
      description: Get all channels the authenticated user has joined
      produces:
      - application/json
      responses:
        "200":
          description: List of joined channels
          schema:
            $ref: '#/definitions/internal_api.ChannelsResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Get joined channels
      tags:
      - User Management
  /api/user/channels/owned:
    get:
      consumes:
      - application/json
      description: Get all channels owned by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of owned channels
          schema:
            $ref: '#/definitions/internal_api.ChannelsResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      security:
      - CookieAuth: []
      summary: Get owned channels
      tags:
      - User Management
  /hc:
    get:
      description: Check if the server is running and responsive
      produces:
      - text/plain
      responses:
        "200":
          description: Running
          schema:
            type: string
      summary: Health check
      tags:
      - System
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api.UserLoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/internal_api.AuthResponse'
        "400":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      summary: Login user
      tags:
      - Authentication
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with username and password
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api.UserRegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            $ref: '#/definitions/internal_api.AuthResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_api.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
schemes:
- https
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
  CookieAuth:
    description: JWT token stored in HTTP-only cookie
    in: cookie
    name: token
    type: apiKey
swagger: "2.0"
